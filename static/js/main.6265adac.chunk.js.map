{"version":3,"sources":["components/TextError.js","components/Crud.js","App.js","reportWebVitals.js","index.js"],"names":["TextError","props","className","children","Column","Table","Crud","useState","flag","setFlag","datas","setDatas","validationSchema","yup","name","required","email","message","initialValues","onSubmit","values","resetForm","id","length","type","component","as","onClick","dataSource","title","dataIndex","render","text","record","size","data","console","log","keys","alldata","splice","deleteData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6265adac.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nfunction TextError(props) {\r\n    return (\r\n        <div className=\"error\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default TextError\r\n\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Table, Space } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage  } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport \"./crud.css\";\r\nimport TextError from './TextError';\r\nconst { Column } = Table;\r\n\r\nfunction Crud() {\r\n  const [flag, setFlag] = useState(\"false\");\r\n  const [datas, setDatas] = useState([]);\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n  };\r\n\r\n  const onSubmit = (values, { resetForm }) => {\r\n    setDatas([\r\n      ...datas,\r\n      {\r\n        id: datas.length,\r\n        name: values.name,\r\n        email: values.email,\r\n        message: values.message,\r\n      },\r\n    ]);\r\n    resetForm({ values: \"\" });\r\n  };\r\n\r\n  const validationSchema = yup.object({\r\n    name: yup.string().required(\"Required !\"),\r\n    email: yup.string().email(\"Invalid email format !\").required(\"Required !\"),\r\n    message: yup.string().required(\"Required !\"),\r\n  });\r\n\r\n  const deleteData = (keys) => {\r\n    const alldata = datas;\r\n    alldata.splice(keys, 1);\r\n\r\n    setDatas([...alldata]);\r\n\r\n    //console.log(datas);\r\n  };\r\n\r\n  const updateData = (keys, data) => {\r\n    console.log(data);\r\n    setFlag(\"true\");\r\n  };\r\n\r\n  const cancelEdit = () => {\r\n    setFlag(\"false\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row p-3\">\r\n        <div className=\"col-md-4\">\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={onSubmit}\r\n          >\r\n            <Form>\r\n              <div className=\"form-group\">\r\n                <label>Name</label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  \r\n                />\r\n                <ErrorMessage name='name' component={TextError} />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <Field\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  \r\n                />\r\n                <ErrorMessage name='email' component={TextError} />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Message</label>\r\n                <Field\r\n                  as=\"textarea\"\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  id=\"message\"\r\n                  name=\"message\"\r\n                  \r\n                />\r\n                <ErrorMessage name='message' component={TextError} />\r\n              </div>\r\n\r\n              {flag === \"true\" ? (\r\n                <div>\r\n                  <button className=\"btn btn-primary\" type=\"button\">\r\n                    Update\r\n                  </button>\r\n\r\n                  <button\r\n                    className=\"btn btn-danger\"\r\n                    onClick={() => cancelEdit()}\r\n                    type=\"button\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              ) : (\r\n                <button className=\"btn btn-success\" type=\"submit\">\r\n                  ADD\r\n                </button>\r\n              )}\r\n            </Form>\r\n          </Formik>\r\n        </div>\r\n        <div className=\"col-md-8\">\r\n          <Table dataSource={datas}>\r\n            <Column title=\"Name\" dataIndex=\"name\" />\r\n            <Column title=\"Email\" dataIndex=\"email\" />\r\n            <Column title=\"Message\" dataIndex=\"message\" />\r\n\r\n            <Column\r\n              title=\"Action\"\r\n              render={(text, record) => (\r\n                <Space size=\"middle\">\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    type=\"button\"\r\n                    onClick={() => updateData(record.id, record)}\r\n                  >\r\n                    Edit{\" \"}\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-danger\"\r\n                    type=\"button\"\r\n                    onClick={() => deleteData(record.id)}\r\n                    key={record.id}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </Space>\r\n              )}\r\n            />\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Crud;\r\n","import React from \"react\";\n\n//import Add from \"./components/Add\";\nimport Crud from \"./components/Crud\";\n\nfunction App() {\n  return <Crud />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}